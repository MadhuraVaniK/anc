/**
 * Subclass of node-http-server's Server that adds a default filetype
 * Written by Austin Barrett
 */

const httpServer = require('node-http-server')
const fs = require('fs')

class ServerWithDefault extends httpServer.Server {

  /**
  * Constructor just calls super constructor and sets default
  */
  constructor() {
    super()
    this.defaultExt = 'html'
  }

  /**
  * Sets default because Javascript is a terrible language and won't let me
  * just put this in the constructor.
  */
  setDefault(newDefault) {
    this.defaultExt = newDefault
  }

  /**
  * This method is overridden to append the default extension if the file does
  * not exist and to append index.html if the file is a directory.
  */
  serveFile(filename,exists,request,response) {
    if(!exists) {
      if (!response) {
        return false;
      }
      request.uri.pathname = request.uri.pathname + '.' + this.defaultExt
      request.uri.path = request.uri.path + '.' + this.defaultExt
      request.uri.href = request.uri.href + '.' + this.defaultExt
      filename = filename + '.' + this.defaultExt
      exists = fs.existsSync(filename)
      return super.serveFile(filename, exists, request, response)
    }
    else if (fs.lstatSync(filename).isDirectory()){
      if (!response) {
        return false;
      }
      var index = 'index.html'
      if (request.uri.path[request.uri.path.length - 1] !== '/') {
        index = '/' + index
      }
      request.uri.pathname = request.uri.pathname + index
      request.uri.path = request.uri.path + index
      request.uri.href = request.uri.href + index
      filename = filename + index
      exists = fs.existsSync(filename)
      return super.serveFile(filename, exists, request, response)
    }
    else {
      return super.serveFile(filename, exists, request, response)
    }
  }

  /**
  * The rest of this class's methods are copied and pasted from the superclass
  * so that the overridden version of serveFile is used
  */

  requestReceived(request,response){
    if(this.config.log){
        const logData={
            method  : request.method,
            url     : request.url,
            headers : request.headers
        };

        this.config.logFunction(
            logData
        );
    }

    let uri = url.parse(request.url);
    uri.protocol='http';
    uri.host=uri.hostname=request.headers.host;
    uri.port=80;
    uri.query=querystring.parse(uri.query);

    if(request.connection.encrypted){
        uri.protocol='https';
        uri.port=443;
    }

    (
        function(){
            if(!uri.host){
                return;
            }
            const host=uri.host.split(':');

            if(!host[1]){
                return;
            }
            uri.host=uri.hostname=host[0];
            uri.port=host[1];
        }
    )();

    for(let key in uri){
        if(uri[key]!==null){
            continue;
        }
        uri[key]='';
    }

    request.uri=uri;

    if(
        this.onRawRequest(
            request,
            response,
            completeServing.bind(this)
        )
    ){
        return;
    };

    uri=uri.pathname;

    if (uri=='/'){
        uri=`/${this.config.server.index}`;
    }

    let hostname= [];

    if (request.headers.host !== undefined){
        hostname = request.headers.host.split(':');
    }

    let root = this.config.root;

    if(this.config.verbose){
        console.log(`${this.config.logID} REQUEST ###\n\n`,
            request.headers,'\n',
            uri,'\n\n',
            hostname,'\n\n'
        );
    }

    if(this.config.domain!='0.0.0.0' && hostname.length > 0 && hostname[0]!=this.config.domain){
        if(!this.config.domains[hostname[0]]){
            if(this.config.verbose){
                console.log(`${this.config.logID} INVALID HOST ###\n\n`);
            }
            this.serveFile(hostname[0],false,response);
            return;
        }
        root=this.config.domains[hostname[0]];
    }


    if(this.config.verbose){
        console.log(`${this.config.logID} USING ROOT : ${root}###\n\n`);
    }

    if(uri.slice(-1)=='/'){
        uri+=this.config.server.index;
    }

    request.url=uri;
    request.serverRoot=root;

    request.body='';

    request.on(
      'data',
      function(chunk){
        request.body+=chunk;
      }.bind(this)
    ).on(
      'end',
      function(){
        if(this.config.verbose){
            console.log(`###REQUEST BODY :
  ${request.body}
  ###
              `);
          }

          requestBodyComplete.bind(this,request,response)();
        }.bind(this)
      );
  }

  requestBodyComplete(request,response){
    //return any value to force or specify delayed or manual serving
    if(
        this.onRequest(
            request,
            response,
            completeServing.bind(this)
        )
    ){
        return;
    };

    const filename = path.join(
        request.serverRoot,
        request.url
    );

    fs.exists(
        filename,
        function fileExists(exists){
            this.serveFile(filename,exists,request,response);
        }.bind(this)
    );
  }


  }

//Export class
module.exports=new ServerWithDefault;
